#!/usr/bin/python

from optparse import OptionParser
import os.path
import re
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO
import stat
from struct import calcsize, pack
import sys
from tempfile import NamedTemporaryFile
from urllib2 import HTTPError, urlopen
from zipfile import BadZipfile, ZipFile
from zlib import compress


SRTM_DIR = 'srtm'
URLS = {
    'cgiar': 'http://srtm.csi.cgiar.org/SRT-ZIP/SRTM_v41/SRTM_Data_ArcASCII/',
    'cgiar/ftp': 'ftp://srtm.csi.cgiar.org/SRTM_v41/SRTM_Data_ArcASCII/',
    'jrc': 'ftp://xftp.jrc.it/pub/srtmV4/arcasci/',
    }
NROWS = 6000
NCOLS = 6000
NODATA_VALUE = -9999


try:
    all
except NameError:
    def all(iterable):
        for i in iterable:
            if not i:
                return False
        return True


def download_zip(zip_filename, basename, baseurl):
    url = baseurl + basename + '.zip'
    sys.stderr.write('Downloading %s: ' % url)
    tmp_file = NamedTemporaryFile(dir=os.path.join(SRTM_DIR, 'tmp'), prefix=basename, suffix='.zip')
    try:
        url_file = urlopen(url)
        buffer = url_file.read(65536)
        while buffer:
            sys.stderr.write('d')
            tmp_file.write(buffer)
            buffer = url_file.read(65536)
    except HTTPError:
        if sys.exc_info()[1].code != 404:
            raise
    os.chmod(tmp_file.name, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
    os.link(tmp_file.name, zip_filename)
    sys.stderr.write('\n')


def rows(zip_filename, basename):
    if os.path.getsize(zip_filename):
        asc_file = StringIO(ZipFile(zip_filename).read(basename + '.asc'))
        ncols = int(re.match(r'ncols\s+(\d+)\Z', asc_file.readline().rstrip()).group(1))
        assert ncols == NCOLS
        nrows = int(re.match(r'nrows\s+(\d+)\Z', asc_file.readline().rstrip()).group(1))
        assert nrows == NROWS
        xllcorner = int(re.match(r'xllcorner\s+(-?\d+)\Z', asc_file.readline().rstrip()).group(1))
        yllcorner = float(re.match(r'yllcorner\s+(-?\d+(?:\.\d*)?)\Z', asc_file.readline().rstrip()).group(1))
        cellsize = float(re.match(r'cellsize\s+(\d+(?:\.\d*)?)\Z', asc_file.readline().rstrip()).group(1))
        NODATA_value = int(re.match(r'NODATA_value\s+(-?\d+)\Z', asc_file.readline().rstrip()).group(1))
        assert NODATA_value == NODATA_VALUE
        for i in xrange(0, nrows):
            yield map(int, asc_file.readline().split())


def create_tile(tile_filename, basename, zip_filename):
    sys.stderr.write('Creating %s: ' % tile_filename)
    tmp_file = NamedTemporaryFile(dir=os.path.join(SRTM_DIR, 'tmp'), prefix=basename, suffix='.tile')
    try:
        for i, row in enumerate(rows(zip_filename, basename)):
            if i % 100 == 99:
                sys.stderr.write('t')
            tmp_file.write(pack('!%dh' % NCOLS, *row))
        os.chmod(tmp_file.name, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
        os.link(tmp_file.name, tile_filename)
        sys.stderr.write('\n')
    except BadZipfile:
        sys.stderr.write('BadZipfile\n')


def create_tilez(tilez_filename, basename, zip_filename):
    sys.stderr.write('Creating %s: ' % tilez_filename)
    tmp_file = NamedTemporaryFile(dir=os.path.join(SRTM_DIR, 'tmp'), prefix=basename, suffix='.tilez')
    try:
        if os.path.getsize(zip_filename):
            offset = calcsize('!%di' % NROWS)
            offsets = []
            tmp_file.write('\0' * offset)
            for i, row in enumerate(rows(zip_filename, basename)):
                if i % 100 == 99:
                    sys.stderr.write('z')
                if all(cell == NODATA_VALUE for cell in row):
                    offsets.append(0)
                else:
                    offsets.append(offset)
                    compressed_row = compress(pack('!%dh' % NCOLS, *row))
                    tmp_file.write(pack('!I', len(compressed_row)))
                    assert len(compressed_row) + calcsize('!I') <= 16384
                    offset += calcsize('!I')
                    tmp_file.write(compressed_row)
                    offset += len(compressed_row)
                    if offset % 4:
                        tmp_file.write('\0' * (4 - offset % 4))
                        offset += 4 - offset % 4
            tmp_file.seek(0)
            tmp_file.write(pack('!%di' % NROWS, *offsets))
        os.chmod(tmp_file.name, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)
        os.link(tmp_file.name, tilez_filename)
        sys.stderr.write('\n')
    except BadZipfile:
        sys.stderr.write('BadZipfile\n')


def main(argv):
    parser = OptionParser()
    def on_all(option, opt_str, value, parser, *args, **kwargs):
        parser.values.xs = xrange(1, 73)
        parser.values.ys = xrange(1, 25)
    parser.add_option('--all', action='callback', callback=on_all)
    def on_europe(option, opt_str, value, parser, *args, **kwargs):
        parser.values.xs = xrange(35, 43)
        parser.values.ys = xrange(1, 6)
    parser.add_option('--europe', action='callback', callback=on_europe)
    def on_european_alps(option, opt_str, value, parser, *args, **kwargs):
        parser.values.xs = xrange(38, 40)
        parser.values.ys = xrange(3, 5)
    parser.add_option('--european-alps', action='callback', callback=on_european_alps)
    def on_x(option, opt_str, value, parser, *args, **kwargs):
        parser.values.xs = xrange(value, value + 1)
    parser.add_option('-x', action='callback', type=int, callback=on_x)
    def on_y(option, opt_str, value, parser, *args, **kwargs):
        parser.values.ys = xrange(value, value + 1)
    parser.add_option('-y', action='callback', type=int, callback=on_y)
    parser.add_option('--download', action='store_true', dest='download')
    parser.add_option('--no-download', action='store_false', dest='download')
    parser.add_option('--url', type=str)
    parser.add_option('--tile', action='store_true', dest='tile')
    parser.add_option('--no-tile', action='store_false', dest='tile')
    parser.add_option('--tilez', action='store_true', dest='tilez')
    parser.add_option('--no-tilez', action='store_false', dest='tilez')
    parser.add_option('--ignore-errors', action='store_true', dest='ignore_errors')
    parser.set_defaults(url='jrc')
    parser.set_defaults(download=True)
    parser.set_defaults(tile=False)
    parser.set_defaults(tilez=True)
    options, args = parser.parse_args(argv[1:])
    for x in options.xs:
        for y in options.ys:
            try:
                basename = 'srtm_%02d_%02d' % (x, y)
                zip_filename = os.path.join(SRTM_DIR, 'zip', basename + '.zip')
                if options.download and not os.path.exists(zip_filename):
                    download_zip(zip_filename, basename, URLS.get(options.url, options.url))
                tile_filename = os.path.join(SRTM_DIR, 'tile', basename + '.tile')
                if options.tile and not os.path.exists(tile_filename) and os.path.exists(zip_filename):
                    create_tile(tile_filename, basename, zip_filename)
                tilez_filename = os.path.join(SRTM_DIR, 'tilez', basename + '.tilez')
                if options.tilez and not os.path.exists(tilez_filename) and os.path.exists(zip_filename):
                    create_tilez(tilez_filename, basename, zip_filename)
            except:
                if options.ignore_errors:
                    sys.stderr.write('%s (ignored)\n' % repr(sys.exc_info()))
                else:
                    raise


if __name__ == '__main__':
    main(sys.argv)
